pico-8 cartridge // http://www.pico-8.com
version 42
__lua__

#include chains.p8
#include player.p8

--operation order============
-- -get /apply inputs
-- -apply velocities
-- -add constraints 



-- debug = {0, 0}


function _init()
    cls()
    for i=2, 2 do
        local x = 34 + 40 * i
        local chain = {}
        for j=0, chain_len  do
            add(chain, {{x, j * link_dist}, {x, j * link_dist}})
        end
        add(chains, chain)
    end
end

function _update60()
    update_chains()
    update_player()
    collide_player()
end

function check_line_sq_col(x0, y0, x1, y1, bx0, by0, bx1, by1)
    local a = mid(bx0, x0, bx1) == x0
    local b = mid(by0, y0, by1) == y0
    local dx = x1 - x0
    local dy = y1 - y0
    local c = sgn(dx) == 1
    local d = sgn(dy) == 1
    local x_con = a and (c and bx1 or bx0) or (c and bx0 or bx1) 
    local y_con = b and (d and by1 or by0) or (d and by0 or by1)

    local x_pct = (x_con - x0) / dx
    local new_y = y0 + dy * x_pct
    local got_x = mid(by0, new_y, by1) == new_y

    local y_pct = (y_con - y0) / dy
    local new_x = x0 + dx * y_pct
    local got_y = mid(bx0, new_x, bx1) == new_x
    if got_x and got_y then
        if x_pct < y_pct then
            return {"x_col", x_con, y_con + sgn(dy)}
        else
            return {"y_col", x_con + sgn(dx), y_con}
        end
    else
        if got_x then
            return {"x_col", x_con, y_con + sgn(dy)}
        end
        if got_y then
            return {"y_col", x_con + sgn(dx), y_con}
        end
    end
    return nil
end


function _draw()
    cls()
    map(0, 0, 0, 0, 16, 16)
    draw_chains()
    draw_player()
    -- pset(debug[1], debug[2], 8)
end

function draw_player()
    spr(9, ppos[1] - 3.5, ppos[2] - 3.5)
    -- pset(ppos[1] - 1.5, ppos[2] - 2.5, 8)
end

function draw_chains()
    for chain in all(chains) do
        for i=1, #chain - 1 do
        -- for i=1, #chain do
            local l = chain[i][2]
            local nl = chain[i + 1][2]
            -- line(l[1], l[2], nl[1], nl[2], 14)
            -- pset(l[1], l[2], 11) 
            -- local diff_x = nl[1] - l[1]
            -- local diff_y = nl[2] - l[2]
            -- local dx = diff_x / 2.0
            -- local dy = diff_y / 2.0
            circ(l[1], l[2], 1, 6)
            -- line(l[1], l[2], nl[1], nl[2], 10)
            -- pset(l[1], l[2], 14)
            -- for j = 0, 2 do
            --     local xx = l[1] + dx * j
            --     local yy = l[2] + dy * j
                -- circ(xx, yy, 1, 6)
            -- end
        end
        rectfill(chain[1][2][1] - 5, 0, chain[1][2][1] + 5, 6, 4)
    end
end

__gfx__
000000009999999999999999944f1f1111f1f44911f1f449999999999441f1111111111100000000000000000000000000000000000000000000000000000000
0000000044444449944444449441f111111f1449111f144944444444944f1f111111111100000000000000000000000000000000000000000000000000000000
007007004444444994444444944f1f1ff1f1f44911f1f449444444449441f1111f1f1f1f00777700000000000000000000000000000000000000000000000000
00077000f1f1f449944f1f1f9441f1f11f1f1449111f1449f1f1f1f1944f1f11f1f1f1f100799700000000000000000000000000000000000000000000000000
000770001f1f14499441f1f1944f1f1ff1f1f44911f1f4491f1f1f1f9441f1111f1f1f1f00799700000000000000000000000000000000000000000000000000
00700700f1f1f449944f1f1f9444444444444449111f1449f1f1f1f1944f1f114444444400777700000000000000000000000000000000000000000000000000
00000000111f14499441f111944444444444444911f1f449111111119441f1114444444400000000000000000000000000000000000000000000000000000000
0000000011f1f449944f1f119999999999999999111f144911111111944f1f119999999900000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
002d2b1315050903110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000070500000002060606060601000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000070500000007050808080705000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000070500000003040000000705000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000030400000000000000020601000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000030804000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
