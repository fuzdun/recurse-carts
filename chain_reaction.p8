pico-8 cartridge // http://www.pico-8.com
version 42
__lua__

chains = { }
link_dist = 2
grav = 0.08
chain_spd = 0.7

debug = {0, 0}


function _init()
    printh("=====")
    cls()
    for i=2, 2 do
        local x = 34 + 40 * i
        local chain = {}
        for j=0, 50  do
            add(chain, {{x, j * link_dist}, {x, j * link_dist}})
        end
        add(chains, chain)
    end
end

function _update60()
    update_chains()
    update_player()
    collide_player()
end

function update_chains()
    for chain in all(chains) do
        -- move based on input
        -- if btn(1) then
        --     chain[1][2][1] += chain_spd
        -- end
        -- if btn(0) then
        --     chain[1][2][1] -= chain_spd
        -- end
        -- apply velocity + gravity
        for i=2, #chain do
            local link = chain[i]
            local dx = link[2][1] - link[1][1]
            link[1][1] = link[2][1]
            link[2][1] += dx
            local dy = link[2][2] - link[1][2] + grav
            link[1][2] = link[2][2]
            link[2][2] += dy
        end
        -- handle collisions
        for i=1, #chain do
            local l = chain[i]
            local map_x = flr(l[2][1] / 8)
            local map_y = flr(l[2][2] / 8)
            local wall_l = map_x * 8
            local wall_t = map_y * 8
            local m_spr = mget(map_x, map_y)
            if fget(m_spr, 0) then
                local x0, y0, x1, y1 = l[1][1], l[1][2], l[2][1], l[2][2]
                if fget(m_spr, 5) then
                    local bx0, by0, bx1, by1 = wall_l, wall_t, wall_l + 8, wall_t + 8
                    local col = check_line_sq_col(x0, y0, x1, y1, bx0, by0, bx1, by1)
                    if col[1] == "x_col" then
                        local sx = sgn(x1 - x0)
                        if sx == 1 and fget(m_spr, 1) then
                            l[2][1] = wall_l - 1
                            l[1][1] = wall_l - 1
                        end
                        if sx == -1 and fget(m_spr, 2) then
                            l[2][1] = wall_l + 9
                            l[1][1] = wall_l + 9
                        end
                    else
                        if sgn(y1 - y0) == 1 then
                            l[2][2] = wall_t - 1
                            l[1][2] = wall_t - 1
                            l[1][1] += (x1 - x0) * .5
                        else
                            l[2][2] = wall_t + 9
                            l[1][2] = wall_t + 9
                        end
                    end
                else
                    if fget(m_spr, 1) then
                        l[2][1] = wall_l - 1
                        l[1][1] = wall_l - 1
                    end
                    if fget(m_spr, 2) then
                        l[2][1] = wall_l + 9
                        l[1][1] = wall_l + 9
                    end
                    if fget(m_spr, 3) then
                        l[2][2] = wall_t - 1
                        l[1][2] = wall_t - 1
                        l[1][1] += (x1 - x0) * 0.5
                    end
                    if fget(m_spr, 4) then
                        l[2][2] = wall_t + 9
                        l[1][2] = wall_t + 9
                    end
                end
            end
        end
        -- constrain links
        for n=0, 7 do
            for i=1, #chain - 1 do
                local l = chain[i]
                local nl = chain[i + 1]
                local dx = nl[2][1] - l[2][1]
                local dy = nl[2][2] - l[2][2]
                local d = sqrt(dx * dx + dy * dy)
                if d > link_dist then
                    local pct = 1 - (link_dist / d)
                    local xadj = pct * dx / 2
                    local yadj = pct * dy / 2
                    if i == 1 then
                        nl[2][1] -= xadj * 2
                        nl[2][2] -= yadj * 2
                    else
                        l[2][1] += xadj
                        l[2][2] += yadj
                        nl[2][1] -= xadj
                        nl[2][2] -= yadj
                    end
                end
            end
            for i=1, #chain - 1 do
                ::next_link::
                if i ~= #chain do
                    local l = chain[i]
                    local nl = chain[i + 1]
                    apply_below_corner_bump(l, nl)
                    apply_below_corner_bump(nl, l)
                end
            end
        end
    end
end

function apply_below_corner_bump(l, nl)
    local below_map_x = flr(l[2][1] / 8)
    local below_map_y = flr(l[2][2] / 8) + 1
    local below_wall_l = below_map_x * 8
    local below_wall_t = below_map_y * 8
    local below_tile = mget(below_map_x, below_map_y)
    if not fget(below_tile, 5) then
        return
    end
    if not mid(nl[2][2], below_wall_t, below_wall_t + 8) == nl[2][2] then
        return
    end
    local dx, dy = nl[2][1] - l[2][1], nl[2][2] - l[2][2]
    local constr_dy = below_wall_t - l[2][2]
    if constr_dy > dy then
        return
    end
    local fact = abs(constr_dy) / abs(dy)
    local new_x = l[2][1] + fact * dx
    if mid(below_wall_l, new_x, below_wall_l + 8) == new_x then
        local dir = sgn(nl[2][1] - l[2][1])
        local x_off = 8
        if dir == -1 then
            x_off = 0
        end
        local constr_dx = below_wall_l + x_off - l[2][1]
        local len = sqrt(dx * dx + dy * dy)
        local constr_len = sqrt(constr_dx * constr_dx + constr_dy * constr_dy)
        local fact = min(len / constr_len, 12)
        local offset_x = l[2][1] + constr_dx * fact
        local offset_y = l[2][2] + constr_dy * fact
        nl[2][1] = offset_x
        nl[2][2] = offset_y
    end
end

function check_line_sq_col(x0, y0, x1, y1, bx0, by0, bx1, by1)
    local a = mid(bx0, x0, bx1) == x0
    local b = mid(by0, y0, by1) == y0
    local dx = x1 - x0
    local dy = y1 - y0
    local c = sgn(dx) == 1
    local d = sgn(dy) == 1
    local x_con = a and (c and bx1 or bx0) or (c and bx0 or bx1) 
    local y_con = b and (d and by1 or by0) or (d and by0 or by1)

    local x_pct = (x_con - x0) / dx
    local new_y = y0 + dy * x_pct
    local got_x = mid(by0, new_y, by1) == new_y

    local y_pct = (y_con - y0) / dy
    local new_x = x0 + dx * y_pct
    local got_y = mid(bx0, new_x, bx1) == new_x
    if got_x and got_y then
        if x_pct < y_pct then
            return {"x_col", x_con, y_con + sgn(dy)}
        else
            return {"y_col", x_con + sgn(dx), y_con}
        end
    else
        if got_x then
            return {"x_col", x_con, y_con + sgn(dy)}
        end
        if got_y then
            return {"y_col", x_con + sgn(dx), y_con}
        end
    end
    return nil
end

lppos = {67, 64}
ppos = {67, 64}
pgrav = 0.08
pjump = 1.5

function update_player()
    local dx = ppos[1] - lppos[1]
    local dy = ppos[2] - lppos[2]
    lppos[1] = ppos[1]
    lppos[2] = ppos[2]
    ppos[1] += dx
    ppos[2] += dy
    if not on_ground then
        ppos[2] += pgrav
    end
    if btn(1) then
        ppos[1] += 0.05
    end
    if btn(0) then
        ppos[1] -= 0.05
    end
    if btnp(4) and on_ground then
        lppos[2] += pjump
    end
end

on_ground = false

function collide_player()
    --sides
    local lear = mget((ppos[1] - 2) / 8, (ppos[2] - 2) / 8)
    local lhand = mget((ppos[1] - 2) / 8, (ppos[2] + 1) / 8)
    local rear = mget((ppos[1] + 1) / 8, (ppos[2] - 2) / 8)
    local rhand = mget((ppos[1] + 2) / 8, (ppos[2] + 1) / 8)
    if fget(rear, 0) or fget(rhand, 0) then
        local wall_x = flr((ppos[1] + 2) / 8) * 8 - 2
        ppos[1] = wall_x
        lppos[1] = wall_x
    end
    if fget(lear, 0) or fget(lhand, 0) then
        local wall_x = flr((ppos[1] - 2) / 8) * 8 + 10
        ppos[1] = wall_x
        lppos[1] = wall_x
    end
    --below
    local lfoot = mget((ppos[1] - 1.5) / 8, (ppos[2] + 2.5) / 8)
    local rfoot = mget((ppos[1] + 1.5) / 8, (ppos[2] + 2.5) / 8)
    if fget(lfoot, 0) or fget(rfoot, 0) then
        local floor_y = flr((ppos[2] + 2.5) / 8) * 8 - 2
        if not on_ground then
            ppos[2] = floor_y
            lppos[2] = floor_y
        end
        on_ground = true
    else
        on_ground = false
    end
end

function _draw()
    cls()
    map(0, 0, 0, 0, 16, 16)
    draw_chains()
    draw_player()
    -- pset(debug[1], debug[2], 8)
end

function draw_player()
    spr(9, ppos[1] - 3.5, ppos[2] - 3.5)
    -- pset(ppos[1] + 1.5, ppos[2] + 2.5, 8)
end

function draw_chains()
    for chain in all(chains) do
        for i=1, #chain - 1 do
        -- for i=1, #chain do
            local l = chain[i][2]
            -- local nl = chain[i + 1][2]
            -- line(l[1], l[2], nl[1], nl[2], 14)
            -- pset(l[1], l[2], 11) 
            -- local diff_x = nl[1] - l[1]
            -- local diff_y = nl[2] - l[2]
            -- local dx = diff_x / 2.0
            -- local dy = diff_y / 2.0
            circ(l[1], l[2], 1, 6)
            -- for j = 0, 2 do
            --     local xx = l[1] + dx * j
            --     local yy = l[2] + dy * j
                -- circ(xx, yy, 1, 6)
            -- end
        end
        rectfill(chain[1][2][1] - 5, 0, chain[1][2][1] + 5, 6, 4)
    end
end

__gfx__
000000009999999999999999944f1f1111f1f44911f1f449999999999441f1111111111100000000000000000000000000000000000000000000000000000000
0000000044444449944444449441f111111f1449111f144944444444944f1f111111111100000000000000000000000000000000000000000000000000000000
007007004444444994444444944f1f1ff1f1f44911f1f449444444449441f1111f1f1f1f00777700000000000000000000000000000000000000000000000000
00077000f1f1f449944f1f1f9441f1f11f1f1449111f1449f1f1f1f1944f1f11f1f1f1f100799700000000000000000000000000000000000000000000000000
000770001f1f14499441f1f1944f1f1ff1f1f44911f1f4491f1f1f1f9441f1111f1f1f1f00799700000000000000000000000000000000000000000000000000
00700700f1f1f449944f1f1f9444444444444449111f1449f1f1f1f1944f1f114444444400777700000000000000000000000000000000000000000000000000
00000000111f14499441f111944444444444444911f1f449111111119441f1114444444400000000000000000000000000000000000000000000000000000000
0000000011f1f449944f1f119999999999999999111f144911111111944f1f119999999900000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
002d2b1315050903110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000070500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000030400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000020100070500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000070500070500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000070502060606060100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000030407111111110500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000007111111110500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000007111111110500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
